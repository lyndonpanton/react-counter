{"version":3,"sources":["components/Header.js","components/Button.js","components/Counter.js","components/Main.js","components/Footer.js","components/App.js","index.js"],"names":["Header","props","style","margin","padding","backgroundColor","color","textAlign","name","Button","type","styling","onClick","handleClick","icon","Counter","className","count","Main","handleDecrement","state","setState","handleIncrement","handleReset","this","minusStyling","border","borderRadius","width","height","plusStyling","Object","assign","display","flexDirection","flexWrap","justifyContent","alignItems","fontSize","flexBasis","marginTop","React","Component","Footer","year","author","copyright","App","Date","getFullYear","ReactDOM","render","document","getElementById"],"mappings":"wNAmCeA,EA9BA,SAACC,GAcf,OACC,4BAAQC,MAba,CACrBC,OAAQ,EACRC,QAAS,SACTC,gBAAiB,UACjBC,MAAO,YAmBN,wBAAIJ,MAhBiB,CACtBC,OAAQ,EACRI,UAAW,WAckBN,EAAMO,QClBtBC,EAVA,SAACR,GACf,OAKC,4BAAQS,KAAMT,EAAMS,KAAMR,MAAOD,EAAMU,QAASC,QAASX,EAAMY,aAAcZ,EAAMa,OCItEC,EAVC,SAACd,GAChB,OACC,yBAAKe,UAAU,WAGd,2BAAIf,EAAMgB,SCgGEC,E,YAlGd,WAAYjB,GAAQ,IAAD,8BAClB,4CAAMA,KAaPkB,gBAAkB,WACjB,IAAMF,EAAQ,EAAKG,MAAMH,MAKzB,EAAKI,SAAS,CACbJ,MAAOA,EAAQ,KArBE,EAyBnBK,gBAAkB,WACjB,IAAML,EAAQ,EAAKG,MAAMH,MAEzB,EAAKI,SAAS,CACbJ,MAAOA,EAAQ,KA7BE,EAiCnBM,YAAc,WACb,EAAKF,SAAS,CACbJ,MAAO,KA9BR,EAAKG,MAAQ,CACZH,MAAO,GANU,E,sEAwClB,IAAMA,EAAQO,KAAKJ,MAAMH,MAcnBQ,EAAe,CACpBC,OAAQ,oBACRC,aAAc,MACdC,MAAO,OACPC,OAAQ,OACRxB,gBAAiB,UACjBC,MAAO,WAUFwB,EAAcC,OAAOC,OAAO,GAAIP,EAAc,CACnDpB,gBAAiB,YAclB,OACC,0BAAMH,MA5Ca,CACnB+B,QAAS,OACTC,cAAe,MACfC,SAAU,OACVC,eAAgB,eAChBC,WAAY,SAEZlC,OAAQ,SACRC,QAAS,WACTkC,SAAU,SAsCT,kBAAC,EAAD,CAAQ5B,KAAK,QAAQI,KAAK,IAAIH,QAASc,EAAcZ,YAAaW,KAAKL,kBACvE,kBAAC,EAAD,CAASF,MAAOA,IAChB,kBAAC,EAAD,CAAQP,KAAK,OAAOI,KAAK,IAAIH,QAASmB,EAAajB,YAAaW,KAAKF,kBACrE,kBAAC,EAAD,CAAQZ,KAAK,QAAQI,KAAK,QAAQH,QAlBf,CACpB4B,UAAW,OAEXb,OAAQ,oBACRC,aAAc,MACda,UAAW,OACXpC,QAAS,SACTC,gBAAiB,UACjBC,MAAO,WAUmDO,YAAaW,KAAKD,mB,GA7F5DkB,IAAMC,WCcVC,EAhBA,SAAC1C,GAQf,OACC,4BAAQC,MARa,CACrBE,QAAS,OACTC,gBAAiB,UACjBE,UAAW,SACXD,MAAO,YAMN,mCAAWL,EAAM2C,KAAjB,IAAwB3C,EAAM4C,OAA9B,MAAyC5C,EAAM6C,aCgDnCC,G,kBAjDd,WAAY9C,GAAQ,IAAD,8BAIlB,4CAAMA,KAEDmB,MAAQ,CACZyB,OAAQ,gBACRC,UAAW,sBACXtC,KAAM,gBACNoC,MAAO,IAAII,MAAQC,eAVF,E,sEAcV,MAGkCzB,KAAKJ,MAAvCyB,EAHA,EAGAA,OAAQC,EAHR,EAGQA,UAAWtC,EAHnB,EAGmBA,KAAMoC,EAHzB,EAGyBA,KAajC,OAIC,yBAAK5B,UAAU,OAOd,kBAAC,EAAD,CAAQR,KAAMA,IACd,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQqC,OAAQA,EAAQC,UAAWA,EAAWF,KAAMA,S,GA5CtCH,IAAMC,YCLxBQ,IAASC,OACR,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.91331a56.chunk.js","sourcesContent":["import React from \"react\";\n\n// as this component does not have state and is\n// written using ES6 syntax it is known as a\n// \"stateless\" component\nconst Header = (props) => {\n\t// this is a object which contains styling\n\tconst headerStyling = {\n\t\tmargin: 0,\n\t\tpadding: \"12px 0\",\n\t\tbackgroundColor: \"#FA7600\",\n\t\tcolor: \"#FFFFFF\"\n\t};\n\n\tconst headingStyling = {\n\t\tmargin: 0,\n\t\ttextAlign: \"center\"\n\t};\n\n\treturn (\n\t\t<header style={headerStyling}>\n\t\t\t{ /* in react you can add inline styling defined in an object */ }\n\t\t\t{ /* using the style attribute and add the style object */ }\n\t\t\t{ /* inside curly braces the curly braces are necessary as */ }\n\t\t\t{ /* it is javascript */ }\n\n\t\t\t{ /* the name property which was used on this component */ }\n\t\t\t{ /* when it was rendered from the app component is now */ }\n\t\t\t{ /* available for this component props which is a object */ }\n\t\t\t{ /* with keys, values pairs */ }\n\t\t\t<h1 style={headingStyling}>{props.name}</h1>\n\t\t</header>\n\t);\n};\n\nexport default Header;","import React from \"react\";\n\nconst Button = (props) => {\n\treturn (\n\t\t/* this element gets its styling from the props passed by its container */\n\t\t/* and its \"onClick\" attribute is actually a plain javascript event lister */\n\t\t/* so when the button is pressed the value (method) of the \"handleClick\" */\n\t\t/* which was passed to the component is called */\n\t\t<button type={props.type} style={props.styling} onClick={props.handleClick}>{props.icon}</button>\n\t);\n};\n\nexport default Button;","import React from \"react\";\n\nconst Counter = (props) => {\n\treturn (\n\t\t<div className=\"counter\">\n\t\t\t{ /* the count prop is displayed here and is updated when */ }\n\t\t\t{ /* the state of the component it belongs to updates */ }\n\t\t\t<p>{props.count}</p>\n\t\t</div>\n\t);\n};\n\nexport default Counter;","import React from \"react\";\nimport Button from \"./Button\";\nimport Counter from \"./Counter\";\n\nclass Main extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t/* the count property is used to keep track of the\n\t\t** count which is displayed in the browser\n\t\t*/\n\t\tthis.state = {\n\t\t\tcount: 0\n\t\t};\n\t};\n\n\t/* this is a method of this component and uses ES6 syntax\n\t** so no additional binding is required, when it is called\n\t** it decreases the count property inside the state\n\t*/\n\thandleDecrement = () => {\n\t\tconst count = this.state.count;\n\n\t\t/* the state cannot be changed using normal expressions \n\t\t** instead this method is used to changed it\n\t\t*/\n\t\tthis.setState({\n\t\t\tcount: count - 1\n\t\t});\n\t};\n\n\thandleIncrement = () => {\n\t\tconst count = this.state.count;\n\n\t\tthis.setState({\n\t\t\tcount: count + 1\n\t\t});\n\t};\n\n\thandleReset = () => {\n\t\tthis.setState({\n\t\t\tcount: 0\n\t\t});\n\t};\n\n\trender() {\n\t\tconst count = this.state.count;\n\n\t\tconst mainStyling = {\n\t\t\tdisplay: \"flex\",\n\t\t\tflexDirection: \"row\",\n\t\t\tflexWrap: \"wrap\",\n\t\t\tjustifyContent: \"space-around\",\n\t\t\talignItems: \"center\",\n\n\t\t\tmargin: \"40px 0\",\n\t\t\tpadding: \"10px 20%\",\n\t\t\tfontSize: \"20px\"\n\t\t};\n\n\t\tconst minusStyling = {\n\t\t\tborder: \"#000000 solid 1px\",\n\t\t\tborderRadius: \"5px\",\n\t\t\twidth: \"40px\",\n\t\t\theight: \"40px\",\n\t\t\tbackgroundColor: \"#FF0000\",\n\t\t\tcolor: \"#FFFFFF\"\n\t\t};\n\n\t\t/* This is ES5 syntax which first creates an empty object,\n\t\t** then the object in the second parameter overides any\n\t\t** properties in shares with the first object and adds any\n\t\t** new properties, the third object then overrides the\n\t\t** properties in that combined object and addes any\n\t\t** new properties\n\t\t*/\n\t\tconst plusStyling = Object.assign({}, minusStyling, {\n\t\t\tbackgroundColor: \"#00FF00\"\n\t\t});\n\n\t\tconst resetStyling = {\n\t\t\tflexBasis: \"100%\",\n\n\t\t\tborder: \"#000000 solid 1px\",\n\t\t\tborderRadius: \"5px\",\n\t\t\tmarginTop: \"10px\",\n\t\t\tpadding: \"10px 0\",\n\t\t\tbackgroundColor: \"#0000FF\",\n\t\t\tcolor: \"#FFFFFF\"\n\t\t};\n\n\t\treturn (\n\t\t\t<main style={mainStyling}>\n\t\t\t\t{ /* the handleClick property is passed the buttons respective method */ }\n\t\t\t\t{ /* and can now be used by the component it is passed to */ }\n\t\t\t\t<Button type=\"minus\" icon=\"-\" styling={minusStyling} handleClick={this.handleDecrement} />\n\t\t\t\t<Counter count={count} />\n\t\t\t\t<Button type=\"plus\" icon=\"+\" styling={plusStyling} handleClick={this.handleIncrement} />\n\t\t\t\t<Button type=\"reset\" icon=\"reset\" styling={resetStyling} handleClick={this.handleReset} />\n\t\t\t</main>\n\t\t);\n\t};\n};\n\nexport default Main;","import React from \"react\";\n\nconst Footer = (props) => {\n\tconst footerStyling = {\n\t\tpadding: \"80px\",\n\t\tbackgroundColor: \"#F8F8F8\",\n\t\ttextAlign: \"center\",\n\t\tcolor: \"#777777\"\n\t};\n\n\treturn (\n\t\t<footer style={footerStyling}>\n\t\t\t{ /* this uses props sent from its container component */ }\n\t\t\t<p>&copy; {props.year} {props.author} | {props.copyright}</p>\n\t\t</footer>\n\t);\n};\n\nexport default Footer;","import React from \"react\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport Footer from \"./Footer\";\n\nimport \"../assets/styles/main.css\";\n\n// this is an ES6 class which defines a template\n// for a component\n// this is known as a \"Stateful Component\" as it has a constructor\n// with a state\nclass App extends React.Component {\n\tconstructor(props) {\n\t\t// super gets the properties, methods of the extended class\n\t\t// (React.Component) and applies them to the current on\n\t\t// (App), this enables the use of state in a component\n\t\tsuper(props);\n\t\t// a component \n\t\tthis.state = {\n\t\t\tauthor: \"Lyndon Panton\",\n\t\t\tcopyright: \"All Rights Reserved\",\n\t\t\tname: \"React Counter\",\n\t\t\tyear: (new Date()).getFullYear()\n\t\t};\n\t};\n\n\trender() {\n\t\t// this is ES6 syntax known as destructuring and it applies\n\t\t// the respective values in this.state to the defined variables\n\t\tconst { author, copyright, name, year } = this.state;\n\t\t// so the author variable is set to this.state.author\n\t\t// the copyright variable is set to this.state.copyright\n\t\t// the name variable is set to this.state.name\n\t\t// the year variable is set to this.state.year\n\n\t\t// the syntax ES6 is equivalent to...\n\t\t// const author = this.state.author;\n\t\t// const copyright = this.state.copyright;\n\t\t// const name = this.state.name;\n\t\t// const year = this.state.year;\n\n\t\t// this is what is returned when you add a component to html\n\t\treturn (\n\t\t\t// as class is a reserved keyword in javascript to add classes\n\t\t\t// to element you must use the \"className\" attribute instead\n\t\t\t// use the id attribute the same as you would in html\n\t\t\t<div className=\"app\">\n\t\t\t\t{ /* curly braces are used to insert javascript in html*/ }\n\t\t\t\t{ /* when inside the return method as you cannot use comments */ }\n\t\t\t\t{ /* (html or javascript) when inside the render method */ }\n\n\t\t\t\t{/* this renders the header component added sends the name */ }\n\t\t\t\t{ /* value inside this component as a prop in the header component */ }\n\t\t\t\t<Header name={name} />\n\t\t\t\t<Main />\n\t\t\t\t<Footer author={author} copyright={copyright} year={year} />\n\t\t\t</div>\n\t\t);\n\t};\n};\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\n// ReactDOM is for working with the browser display\n// the render method is for displaying elements, components\nReactDOM.render(\n\t<App />, // this component is placed inside...\n\tdocument.getElementById(\"root\") // ...this element in the html file\n);"],"sourceRoot":""}